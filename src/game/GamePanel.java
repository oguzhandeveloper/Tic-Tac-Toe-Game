/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.border.EmptyBorder;
import javax.imageio.stream.FileImageInputStream;

/**
 *
 * @author OGUZHAN
 */
public class GamePanel extends JPanel implements MouseListener {

    /**
     * Creates new form GamePanel
     */
    Color colorX = Color.red;
    Color colorTable = Color.black;

    boolean player1 = true;

    int[][] board = new int[3][3];

    final int PLAYER_ONE = 0;
    final int PLAYER_TWO = 1;
    final int PLAYER_NOONE = -1;

    int draw = -1;
    GameFrame mainWindow;

    public static Timer timeForPlayers;

    Image[] ticOImages = new Image[6];
    Image[] ticXImages = new Image[6];
    
    public GamePanel(GameFrame mainWindow) {
        this.mainWindow = mainWindow;
        this.setBackground(SystemColor.controlHighlight);
        this.setBorder(new EmptyBorder(0, 0, 0, 0));
        this.setSize(300, 300);

        this.StartBegin();
        timeForPlayers.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        g.setColor(colorTable);

        //iskelet(Duvarlar)
        g.fillRect(this.getWidth() / 3, 0, 2, this.getHeight());
        g.fillRect((this.getWidth() / 3) * 2, 0, 2, this.getHeight());
        g.fillRect(0, this.getHeight() / 3, this.getWidth(), 2);
        g.fillRect(0, (this.getHeight() / 3) * 2, this.getWidth(), 2);

        DrawPlayer(g);
        GameOver();
        

    }

    @Override
    public void repaint() {
        super.repaint(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        KoordinatControl(e);
        GameOver();
    }
    
    //Player Time Control with Timer Object
    public void TimerAction() {
        timeForPlayers = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (playerOneTime <= 0 && !playerOneFinish) {
                    playerOneTime = 0;
                    playerOneFinish = true;
                    mainWindow.PanelEnable(false, "Player 1 Has Expired.");
                }
                if (playerTwoTime <= 0 && !playerTwoFinish) {
                    playerTwoTime = 0;
                    playerTwoFinish = true;
                    mainWindow.PanelEnable(false, "Player 1 Has Expired.");
                }

                if (player1 && playerOneTime != 0) {
                    playerOneTime--;
                    mainWindow.lblPlayer1.setText(playerOneTime + " second");
                }
                if (!player1 && playerTwoTime != 0) {
                    playerTwoTime--;
                    mainWindow.lblPlayer2.setText(playerTwoTime + " second");
                }
            }
        });

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }
    
    //Winner Control who win the game(player1 = true Player1 player1=false Player2) return true else false
    public boolean WinnerControl(boolean player1) {

        int player = player1 ? PLAYER_ONE : PLAYER_TWO;

        return (board[0][0] == player && board[0][1] == player && board[0][2] == player)
                || (board[1][0] == player && board[1][1] == player && board[1][2] == player)
                || (board[2][0] == player && board[2][1] == player && board[2][2] == player)
                || (board[0][0] == player && board[1][0] == player && board[2][0] == player)
                || (board[0][1] == player && board[1][1] == player && board[2][1] == player)
                || (board[0][2] == player && board[1][2] == player && board[2][2] == player)
                || (board[0][0] == player && board[1][1] == player && board[2][2] == player)
                || (board[0][2] == player && board[1][1] == player && board[2][0] == player);
    }

    //Has a Empty Cell? if has return true else false
    public boolean hasEmpty() {
        int kHas = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == PLAYER_NOONE) {
                    kHas++;
                }
            }
        }
        return kHas != 0;
    }

    //Game assign initialize components' value in beginning
    public void StartBegin() {
        
        draw = -1;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = PLAYER_NOONE;
            }
        }
        for (int i = 0; i < 6; i++) {
            ticOImages[i] = null;
            ticXImages[i] = null;
        }

        PlayerTimeAssginment();
        ImageAssignment();
        TimerAction();
                    
        repaint();
    }
    
    //Game assign images in beginning
    public void ImageAssignment() {
        try {
            for (int i = 0; i < 6; i++) {
                ticOImages[i] = ImageIO.read(new FileImageInputStream(new File("tic-tac-toe-o.png")));
                ticXImages[i] = ImageIO.read(new FileImageInputStream(new File("tic-tac-toe-x.png")));
            }
        } catch (IOException e) {
            System.out.println("Hata!Resimler Yuklenemedi!");
        }
    }

    int time = 10;
    int playerOneTime = time;
    int playerTwoTime = time;
    boolean playerOneFinish = false;
    boolean playerTwoFinish = false;

    //The Function initially assigns the initial value of the time components.
    public void PlayerTimeAssginment() {
        playerTwoTime = time;
        playerOneTime = time;
        playerOneFinish = false;
        playerTwoFinish = false;

        player1 = true;

        mainWindow.lblPlayer1.setText(playerOneTime + " second");
        mainWindow.lblPlayer2.setText(playerTwoTime + " second");
    }
    
    //The function controls the player and determines the clicked coordinate.
    public void KoordinatControl(MouseEvent e) {
        //ilk Sutun
       
        if (e.getX() < this.getWidth() / 3 && e.getY() < this.getHeight() / 3) {
            if (board[0][0] == PLAYER_NOONE) {
                draw = 0;
            }
            //System.out.println("[0,0]");

        } else if (e.getX() < this.getWidth() / 3 && e.getY() < (this.getHeight() / 3) * 2) {
            if (board[0][1] == PLAYER_NOONE) {
                draw = 1;
            }
            //System.out.println("[1,0]");
        } else if (e.getX() < this.getWidth() / 3 && e.getY() < this.getHeight()) {
            if (board[0][2] == PLAYER_NOONE) {
                draw = 2;
            }
            //System.out.println("[2,0]");
        } //ikinci Sutun
        else if (e.getX() < (this.getWidth() / 3) * 2 && e.getY() < this.getHeight() / 3) {
            if (board[1][0] == PLAYER_NOONE) {
                draw = 3;
            }
            //System.out.println("[0,1]");
        } else if (e.getX() < (this.getWidth() / 3) * 2 && e.getY() < (this.getHeight() / 3) * 2) {
            if (board[1][1] == PLAYER_NOONE) {
                draw = 4;
            }
            //System.out.println("[1,1]");
        } else if (e.getX() < (this.getWidth() / 3) * 2 && e.getY() < this.getHeight()) {
            if (board[1][2] == PLAYER_NOONE) {
                draw = 5;
            }
            //System.out.println("[2,1]");
        } //ucuncu Sutun
        else if (e.getX() < this.getWidth() && e.getY() < this.getHeight() / 3) {
            if (board[2][0] == PLAYER_NOONE) {
                draw = 6;
            }
            // System.out.println("[0,2]");
        } else if (e.getX() < this.getWidth() && e.getY() < (this.getHeight() / 3) * 2) {
            if (board[2][1] == PLAYER_NOONE) {
                draw = 7;
            }
            //System.out.println("[1,2]");
        } else if (e.getX() < this.getWidth() && e.getY() < this.getHeight()) {
            if (board[2][2] == PLAYER_NOONE) {
                draw = 8;
            }
            //System.out.println("[2,2]");
        }

        repaint();

    }
    
    //The function controls the is game over.
    public void GameOver() {
        if (WinnerControl(true)) {//Player 1
            timeForPlayers.stop();
            timeForPlayers = null;
            StartBegin();
            mainWindow.PanelEnable(false, "Winner Player 1");

        }
        if (WinnerControl(false)) {//Player 2
            timeForPlayers.stop();
            timeForPlayers =  null;
            StartBegin();
            mainWindow.PanelEnable(false, "Winner Player 2");
        }
        if (!hasEmpty()) {
            timeForPlayers.stop();
            timeForPlayers = null;
            StartBegin();
            mainWindow.PanelEnable(false, "Draw");
        }
    }

    public void DrawPlayer(Graphics g) {

        int k = 0;
        int o = 0;
        int x = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++, k++) {
                //Suanki bolge bossa ve tiklanan bolgenin uerindeysek 
                if (board[i][j] == PLAYER_NOONE && k == draw) {
                    //Oyuncu Birde ise
                    if (player1) {
                        //g.setColor(colorX);
                        //g.drawLine(i * 100 + 1, j * 100 + 1, i * 100 + 99, j * 100 + 99);
                        //g.drawLine(i * 100 + 1, j * 100 + 99, i * 100 + 99, j * 100 + 1);
                        g.drawImage(ticXImages[x], i * 100 + 1, j * 100 + 1, ticXImages[x].getWidth(this) / 3, ticXImages[x].getHeight(this) / 3, this);
                        x++;
                        board[i][j] = PLAYER_ONE;
                        player1 = false;
                    }//Oyuncu ikide ise
                    else if (!player1) {
                        //g.setColor(colorX);
                        //g.drawOval(i * 100 + 1, j * 100 + 1, 99, 99);
                        g.drawImage(ticOImages[o], i * 100 + 1, j * 100 + 1, ticOImages[o].getWidth(this) / 3, ticOImages[o].getHeight(this) / 3, this);
                        o++;
                        board[i][j] = PLAYER_TWO;
                        player1 = true;
                    }
                } //Daha once oynamis ise Player1 tekrar ciz
                else if (board[i][j] == PLAYER_ONE) {
                    //g.setColor(colorX);
                    //g.drawLine(i * 100 + 1, j * 100 + 1, i * 100 + 99, j * 100 + 99);
                    // g.drawLine(i * 100 + 1, j * 100 + 99, i * 100 + 99, j * 100 + 1);
                    g.drawImage(ticXImages[x], i * 100 + 1, j * 100 + 1, ticXImages[x].getWidth(this) / 3, ticXImages[x].getHeight(this) / 3, this);
                    x++;

                }//Daha once oynamis ise Player2 tekrar ciz
                else if (board[i][j] == PLAYER_TWO) {
                    //g.setColor(colorX);
                    //g.drawOval(i * 100 + 1, j * 100 + 1, 99, 99);
                    g.drawImage(ticOImages[o], i * 100 + 1, j * 100 + 1, ticOImages[o].getWidth(this) / 3, ticOImages[o].getHeight(this) / 3, this);
                    o++;
                }

            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
